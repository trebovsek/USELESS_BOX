RCSTM8 COMPILER V2.26.09.317,  STM8S_IT           02/16/10  16:46:11

QCW(0x009638A0)

RCSTM8 COMPILER V2.26.09.317, COMPILATION OF MODULE STM8S_IT  
OBJECT MODULE PLACED IN Debug\stm8s_it.o
COMPILER INVOKED BY: OBJECT(Debug\stm8s_it.o) PIN(C:\Program Files\Raisonance\Ride\inc\ST7) PIN(C:\Program Files\Raisonance\Ride\inc) WRV(0) STM8(SMALL) DEBUG DGC(page0) AUTO OT(0) PR(Debug\stm8s_it.lst) CD CO SB LAOB PIN(..\..\includes) PIN(..\..\..\..\libraries\stm8s_stdperiph_driver\inc) 

stmt level    source
   1          /**
   2            ******************************************************************************
   3            * @file stm8s_it.c
   4            * @brief This file contains all the interrupt routines, for Cosmic compiler.
   5            * @author STMicroelectronics - MCD Application Team
   6            * @version V1.1.1
   7            * @date 06/05/2009
   8            ******************************************************************************
   9            *
  10            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  11            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  12            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  13            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  14            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  15            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  16            *
  17            * <h2><center>&copy; COPYRIGHT 2009 STMicroelectronics</center></h2>
  18            * @image html logo.bmp
  19            ******************************************************************************
  20            */
  21          
  22          /* Includes ------------------------------------------------------------------*/
  23          #include "stm8s_it.h"
  24          
  25          /* Private typedef -----------------------------------------------------------*/
  26          /* Private define ------------------------------------------------------------*/
  27          #define TxBufferSize   (countof(TxBuffer) - 1)
  28          #define RxBufferSize   0x20
  29          
  30          /* Private macro -------------------------------------------------------------*/
  31          #define countof(a)   (sizeof(a) / sizeof(*(a)))
  32          
  33          /* Private variables ---------------------------------------------------------*/
  34          u8 TxBuffer[] = "";
  35          
  36          u8 RxBuffer[RxBufferSize];
  37          u8 NbrOfDataToTransfer = TxBufferSize;
  38          u8 NbrOfDataToRead = RxBufferSize;
  39          u8 TxCounter = 0;
  40          u16 RxCounter = 0;
  41          u16 nbintr = 0;
  42          
  43          /* Private function prototypes -----------------------------------------------*/
  44          /* Private functions ---------------------------------------------------------*/
  45          
  46          /* Public functions ----------------------------------------------------------*/
  47          
  48          /** @addtogroup IT_Functions
  49            * @{
  50            */
  51          #ifdef _COSMIC_
              /**
                * @brief Dummy interrupt routine
                * @par Parameters:
                * None
                * @retval
                * None
              */
              @far @interrupt void NonHandledInterrupt(void)
              {
                /* In order to detect unexpected events during development,
                   it is recommended to set a breakpoint on the following instruction.
                */
              }
              
              /**
                * @brief TRAP interrupt routine
                * @par Parameters:
                * None
                * @retval
                * None
              */
              @far @interrupt void TRAP_IRQHandler(void)
              {
                /* In order to detect unexpected events during development,
                   it is recommended to set a breakpoint on the following instruction.
                */
              }
              #else /*_RAISONANCE_*/
  80          
  81          /**
  82            * @brief TRAP interrupt routine
  83            * @par Parameters:
  84            * None
  85            * @retval
  86            * None
  87          */
  88          void TRAP_IRQHandler(void) trap
  89          {
  90   1        /* In order to detect unexpected events during development,
  91   1           it is recommended to set a breakpoint on the following instruction.
  92   1        */
  93   1      }
  94          #endif /*_COSMIC_*/
  95          
  96          /**
  97            * @brief Top Level Interrupt Interruption routine.
  98            * @par Parameters:
  99            * None
 100            * @retval
 101            * None
 102          */
 103          #ifdef _COSMIC_
              @far @interrupt void TLI_IRQHandler(void)
              #else /* _RAISONANCE_ */
 106          void TLI_IRQHandler(void) interrupt 0
 107          #endif /* _COSMIC_ */
 108          {
 109   1        /* In order to detect unexpected events during development,
 110   1           it is recommended to set a breakpoint on the following instruction.
 111   1        */
 112   1      }
 113          
 114          /**
 115            * @brief Auto Wake Up Interruption routine.
 116            * @par Parameters:
 117            * None
 118            * @retval
 119            * None
 120          */
 121          #ifdef _COSMIC_
              @far @interrupt void AWU_IRQHandler(void)
              #else /* _RAISONANCE_ */
 124          void AWU_IRQHandler(void) interrupt 1
 125          #endif /* _COSMIC_ */
 126          {
 127   1        /* In order to detect unexpected events during development,
 128   1           it is recommended to set a breakpoint on the following instruction.
 129   1        */
 130   1      }
 131          
 132          /**
 133            * @brief Clock Controller Interruption routine.
 134            * @par Parameters:
 135            * None
 136            * @retval
 137            * None
 138          */
 139          #ifdef _COSMIC_
              @far @interrupt void CLK_IRQHandler(void)
              #else /* _RAISONANCE_ */
 142          void CLK_IRQHandler(void) interrupt 2
 143          #endif /* _COSMIC_ */
 144          {
 145   1        /* In order to detect unexpected events during development,
 146   1           it is recommended to set a breakpoint on the following instruction.
 147   1        */
 148   1      }
 149          
 150          /**
 151            * @brief External Interrupt PORTA Interruption routine.
 152            * @par Parameters:
 153            * None
 154            * @retval
 155            * None
 156          */
 157          #ifdef _COSMIC_
              @far @interrupt void EXTI_PORTA_IRQHandler(void)
              #else /* _RAISONANCE_ */
 160          void EXTI_PORTA_IRQHandler(void) interrupt 3
 161          #endif /* _COSMIC_ */
 162          {
 163   1        /* In order to detect unexpected events during development,
 164   1           it is recommended to set a breakpoint on the following instruction.
 165   1        */
 166   1      }
 167          
 168          /**
 169            * @brief External Interrupt PORTB Interruption routine.
 170            * @par Parameters:
 171            * None
 172            * @retval
 173            * None
 174          */
 175          #ifdef _COSMIC_
              @far @interrupt void EXTI_PORTB_IRQHandler(void)
              #else /* _RAISONANCE_ */
 178          void EXTI_PORTB_IRQHandler(void) interrupt 4
 179          #endif /* _COSMIC_ */
 180          {
 181   1        /* In order to detect unexpected events during development,
 182   1           it is recommended to set a breakpoint on the following instruction.
 183   1        */
 184   1      }
 185          
 186          /**
 187            * @brief External Interrupt PORTC Interruption routine.
 188            * @par Parameters:
 189            * None
 190            * @retval
 191            * None
 192          */
 193          #ifdef _COSMIC_
              @far @interrupt void EXTI_PORTC_IRQHandler(void)
              #else /* _RAISONANCE_ */
 196          void EXTI_PORTC_IRQHandler(void) interrupt 5
 197          #endif /* _COSMIC_ */
 198          {
 199   1        /* In order to detect unexpected events during development,
 200   1           it is recommended to set a breakpoint on the following instruction.
 201   1        */
 202   1      }
 203          
 204          /**
 205            * @brief External Interrupt PORTD Interruption routine.
 206            * @par Parameters:
 207            * None
 208            * @retval
 209            * None
 210          */
 211          #ifdef _COSMIC_
              @far @interrupt void EXTI_PORTD_IRQHandler(void)
              #else /* _RAISONANCE_ */
 214          void EXTI_PORTD_IRQHandler(void) interrupt 6
 215          #endif /* _COSMIC_ */
 216          {
 217   1        /* In order to detect unexpected events during development,
 218   1           it is recommended to set a breakpoint on the following instruction.
 219   1        */
 220   1      }
 221          
 222          /**
 223            * @brief External Interrupt PORTE Interruption routine.
 224            * @par Parameters:
 225            * None
 226            * @retval
 227            * None
 228          */
 229          #ifdef _COSMIC_
              @far @interrupt void EXTI_PORTE_IRQHandler(void)
              #else /* _RAISONANCE_ */
 232          void EXTI_PORTE_IRQHandler(void) interrupt 7
 233          #endif /* _COSMIC_ */
 234          {
 235   1        /* In order to detect unexpected events during development,
 236   1           it is recommended to set a breakpoint on the following instruction.
 237   1        */
 238   1      }
 239          #ifdef STM8S903
              /**
                * @brief External Interrupt PORTF Interruption routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void EXTI_PORTF_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void EXTI_PORTF_IRQHandler(void) interrupt 8
              #endif /* _COSMIC_ */
              {
                /* In order to detect unexpected events during development,
                   it is recommended to set a breakpoint on the following instruction.
                */
              }
              #endif /*STM8S903*/
 258          
 259          #ifdef STM8S208
              /**
                * @brief CAN RX Interruption routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void CAN_RX_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void CAN_RX_IRQHandler(void) interrupt 8
              #endif /* _COSMIC_ */
              {
                /* In order to detect unexpected events during development,
                   it is recommended to set a breakpoint on the following instruction.
                */
              }
              
              /**
                * @brief CAN TX Interruption routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void CAN_TX_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void CAN_TX_IRQHandler(void) interrupt 9
              #endif /* _COSMIC_ */
              {
                /* In order to detect unexpected events during development,
                   it is recommended to set a breakpoint on the following instruction.
                */
              }
              #endif /*STM8S208*/
 296          
 297          /**
 298            * @brief SPI Interruption routine.
 299            * @par Parameters:
 300            * None
 301            * @retval
 302            * None
 303          */
 304          #ifdef _COSMIC_
              @far @interrupt void SPI_IRQHandler(void)
              #else /* _RAISONANCE_ */
 307          void SPI_IRQHandler(void) interrupt 10
 308          #endif /* _COSMIC_ */
 309          {
 310   1        /* In order to detect unexpected events during development,
 311   1           it is recommended to set a breakpoint on the following instruction.
 312   1        */
 313   1      }
 314          
 315          /**
 316            * @brief Timer1 Update/Overflow/Trigger/Break Interruption routine.
 317            * @par Parameters:
 318            * None
 319            * @retval
 320            * None
 321          */
 322          #ifdef _COSMIC_
              @far @interrupt void TIM1_UPD_OVF_TRG_BRK_IRQHandler(void)
              #else /* _RAISONANCE_ */
 325          void TIM1_UPD_OVF_TRG_BRK_IRQHandler(void) interrupt 11
 326          #endif /* _COSMIC_ */
 327          {
 328   1        /* In order to detect unexpected events during development,
 329   1           it is recommended to set a breakpoint on the following instruction.
 330   1        */
 331   1      }
 332          
 333          /**
 334            * @brief Timer1 Capture/Compare Interruption routine.
 335            * @par Parameters:
 336            * None
 337            * @retval
 338            * None
 339          */
 340          #ifdef _COSMIC_
              @far @interrupt void TIM1_CAP_COM_IRQHandler(void)
              #else /* _RAISONANCE_ */
 343          void TIM1_CAP_COM_IRQHandler(void) interrupt 12
 344          #endif /* _COSMIC_ */
 345          {
 346   1        /* In order to detect unexpected events during development,
 347   1           it is recommended to set a breakpoint on the following instruction.
 348   1        */
 349   1      }
 350          
 351          #ifdef STM8S903
              /**
                * @brief Timer5 Update/Overflow/Break/Trigger Interruption routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void TIM5_UPD_OVF_BRK_TRG_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void TIM5_UPD_OVF_BRK_TRG_IRQHandler(void) interrupt 13
              #endif /* _COSMIC_ */
              {
                /* In order to detect unexpected events during development,
                   it is recommended to set a breakpoint on the following instruction.
                */
              }
              /**
                * @brief Timer5 Capture/Compare Interruption routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void TIM5_CAP_COM_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void TIM5_CAP_COM_IRQHandler(void) interrupt 14
              #endif /* _COSMIC_ */
              {
                /* In order to detect unexpected events during development,
                   it is recommended to set a breakpoint on the following instruction.
                */
              }
              
              #else /*STM8S208, STM8S207, STM8S105 or STM8S103*/
 388          /**
 389            * @brief Timer2 Update/Overflow/Break Interruption routine.
 390            * @par Parameters:
 391            * None
 392            * @retval
 393            * None
 394          */
 395          #ifdef _COSMIC_
              @far @interrupt void TIM2_UPD_OVF_BRK_IRQHandler(void)
              #else /* _RAISONANCE_ */
 398          void TIM2_UPD_OVF_BRK_IRQHandler(void) interrupt 13
 399          #endif /* _COSMIC_ */
 400          {
 401   1        /* In order to detect unexpected events during development,
 402   1           it is recommended to set a breakpoint on the following instruction.
 403   1        */
 404   1      }
 405          
 406          /**
 407            * @brief Timer2 Capture/Compare Interruption routine.
 408            * @par Parameters:
 409            * None
 410            * @retval
 411            * None
 412          */
 413          #ifdef _COSMIC_
              @far @interrupt void TIM2_CAP_COM_IRQHandler(void)
              #else /* _RAISONANCE_ */
 416          void TIM2_CAP_COM_IRQHandler(void) interrupt 14
 417          #endif /* _COSMIC_ */
 418          {
 419   1        /* In order to detect unexpected events during development,
 420   1           it is recommended to set a breakpoint on the following instruction.
 421   1        */
 422   1      }
 423          #endif /*STM8S903*/
 424          
 425          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S105)
 426          /**
 427            * @brief Timer3 Update/Overflow/Break Interruption routine.
 428            * @par Parameters:
 429            * None
 430            * @retval
 431            * None
 432          */
 433          #ifdef _COSMIC_
              @far @interrupt void TIM3_UPD_OVF_BRK_IRQHandler(void)
              #else /* _RAISONANCE_ */
 436          void TIM3_UPD_OVF_BRK_IRQHandler(void) interrupt 15
 437          #endif /* _COSMIC_ */
 438          {
 439   1      nbintr ++ ;
 440   1      /* Toggle GPIO PIN5 */
 441   1      
 442   1      if ( nbintr == 250 ) {
 443   2      	GPIO_WriteReverse(GPIOD, 0x01);
 444   2      	nbintr = 0;
 445   2      }
 446   1      TIM3_ClearITPendingBit(TIM3_IT_UPDATE);
 447   1      }
 448          
 449          /**
 450            * @brief Timer3 Capture/Compare Interruption routine.
 451            * @par Parameters:
 452            * None
 453            * @retval
 454            * None
 455          */
 456          #ifdef _COSMIC_
              @far @interrupt void TIM3_CAP_COM_IRQHandler(void)
              #else /* _RAISONANCE_ */
 459          void TIM3_CAP_COM_IRQHandler(void) interrupt 16
 460          #endif /* _COSMIC_ */
 461          {
 462   1       
 463   1      }
 464          #endif /*STM8S208, STM8S207 or STM8S105*/
 465          
 466          #ifndef STM8S105
              /**
                * @brief UART1 TX Interruption routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void UART1_TX_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void UART1_TX_IRQHandler(void) interrupt 17
              #endif /* _COSMIC_ */
              {
                /* Write one byte to the transmit data register */
                //UART1_SendData8(TxBuffer[TxCounter++]);
              
                //if (TxCounter == NbrOfDataToTransfer)
                //{
                  /* Disable the UART1 Transmit interrupt */
                  UART1_ITConfig(UART1_IT_TXE, DISABLE);
                //}
              }
              
              /**
                * @brief UART1 RX Interruption routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void UART1_RX_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void UART1_RX_IRQHandler(void) interrupt 18
              #endif /* _COSMIC_ */
              {
                /* Read one byte from the receive data register */
                //RxBuffer[RxCounter++] = (UART1_ReceiveData8() & 0x7F);
              
                //if (RxCounter == NbrOfDataToRead)
                //{
                  /* Disable the UART1 Receive interrupt */
                   UART1_ITConfig(UART1_IT_RXNE_OR, DISABLE);
                //}
              }
              #endif /*STM8S105*/
 513          
 514          /**
 515            * @brief I2C Interruption routine.
 516            * @par Parameters:
 517            * None
 518            * @retval
 519            * None
 520          */
 521          #ifdef _COSMIC_
              @far @interrupt void I2C_IRQHandler(void)
              #else /* _RAISONANCE_ */
 524          void I2C_IRQHandler(void) interrupt 19
 525          #endif /* _COSMIC_ */
 526          {
 527   1        /* In order to detect unexpected events during development,
 528   1           it is recommended to set a breakpoint on the following instruction.
 529   1        */
 530   1      }
 531          
 532          #ifdef STM8S105
 533          /**
 534            * @brief UART2 TX interrupt routine.
 535            * @par Parameters:
 536            * None
 537            * @retval
 538            * None
 539          */
 540          #ifdef _COSMIC_
              @far @interrupt void UART2_TX_IRQHandler(void)
              #else /* _RAISONANCE_ */
 543          void UART2_TX_IRQHandler(void) interrupt 20
 544          #endif /* _COSMIC_ */
 545          {
 546   1      	/* In order to detect unexpected events during development,
 547   1           it is recommended to set a breakpoint on the following instruction.
 548   1        */	
 549   1      }
 550          
 551          /**
 552            * @brief UART2 RX interrupt routine.
 553            * @par Parameters:
 554            * None
 555            * @retval
 556            * None
 557          */
 558          #ifdef _COSMIC_
              @far @interrupt void UART2_RX_IRQHandler(void)
              #else /* _RAISONANCE_ */
 561          void UART2_RX_IRQHandler(void) interrupt 21
 562          #endif /* _COSMIC_ */
 563          {
 564   1      	/* In order to detect unexpected events during development,
 565   1           it is recommended to set a breakpoint on the following instruction.
 566   1        */	
 567   1      }
 568          #endif /* STM8S105*/
 569          
 570          #if defined(STM8S207) || defined(STM8S208)
              /**
                * @brief UART3 TX interrupt routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void UART3_TX_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void UART3_TX_IRQHandler(void) interrupt 20
              #endif /* _COSMIC_ */
              {
                  /* In order to detect unexpected events during development,
                     it is recommended to set a breakpoint on the following instruction.
                  */
                }
              
              /**
                * @brief UART3 RX interrupt routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void UART3_RX_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void UART3_RX_IRQHandler(void) interrupt 21
              #endif /* _COSMIC_ */
              {
                  /* In order to detect unexpected events during development,
                     it is recommended to set a breakpoint on the following instruction.
                  */
                }
              #endif /*STM8S208 or STM8S207*/
 607          
 608          #if defined(STM8S207) || defined(STM8S208)
              /**
                * @brief ADC2 interrupt routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void ADC2_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void ADC2_IRQHandler(void) interrupt 22
              #endif /* _COSMIC_ */
              {
              
                  /* In order to detect unexpected events during development,
                     it is recommended to set a breakpoint on the following instruction.
                  */
                  return;
              
              }
              #else /*STM8S105, STM8S103 or STM8S903*/
 630          /**
 631            * @brief ADC1 interrupt routine.
 632            * @par Parameters:
 633            * None
 634            * @retval
 635            * None
 636          */
 637          #ifdef _COSMIC_
              @far @interrupt void ADC1_IRQHandler(void)
              #else /* _RAISONANCE_ */
 640          void ADC1_IRQHandler(void) interrupt 22
 641          #endif /* _COSMIC_ */
 642          {
 643   1      
 644   1          /* In order to detect unexpected events during development,
 645   1             it is recommended to set a breakpoint on the following instruction.
 646   1          */
 647   1          return;
 648   1      
 649   1      }
 650          #endif /*STM8S208 or STM8S207*/
 651          
 652          #ifdef STM8S903
              /**
                * @brief Timer6 Update/Overflow/Trigger Interruption routine.
                * @par Parameters:
                * None
                * @retval
                * None
              */
              #ifdef _COSMIC_
              @far @interrupt void TIM6_UPD_OVF_TRG_IRQHandler(void)
              #else /* _RAISONANCE_ */
              void TIM6_UPD_OVF_TRG_IRQHandler(void) interrupt 23
              #endif /* _COSMIC_ */
              {
                /* In order to detect unexpected events during development,
                   it is recommended to set a breakpoint on the following instruction.
                */
              }
              #else /*STM8S208, STM8S207, STM8S105 or STM8S103*/
 671          /**
 672            * @brief Timer4 Update/Overflow Interruption routine.
 673            * @par Parameters:
 674            * None
 675            * @retval
 676            * None
 677          */
 678          #ifdef _COSMIC_
              @far @interrupt void TIM4_UPD_OVF_IRQHandler(void)
              #else /* _RAISONANCE_ */
 681          void TIM4_UPD_OVF_IRQHandler(void) interrupt 23
 682          #endif /* _COSMIC_ */
 683          {
 684   1        /* In order to detect unexpected events during development,
 685   1           it is recommended to set a breakpoint on the following instruction.
 686   1        */
 687   1      }
 688          #endif /*STM8S903*/
 689          
 690          /**
 691            * @brief Eeprom EEC Interruption routine.
 692            * @par Parameters:
 693            * None
 694            * @retval
 695            * None
 696          */
 697          #ifdef _COSMIC_
              @far @interrupt void EEPROM_EEC_IRQHandler(void)
              #else /* _RAISONANCE_ */
 700          void EEPROM_EEC_IRQHandler(void) interrupt 24
 701          #endif /* _COSMIC_ */
 702          {
 703   1        /* In order to detect unexpected events during development,
 704   1           it is recommended to set a breakpoint on the following instruction.
 705   1        */
 706   1      }
 707          
 708          /**
 709            * @}
 710            */
 711          
 712          /******************* (C) COPYRIGHT 2009 STMicroelectronics *****END OF FILE****/
 713          
RCSTM8 COMPILER V2.26.09.317
ASSEMBLY LISTING OF GENERATED OBJECT CODE

              ; FUNCTION ?TRAP_IRQHandler (BEGIN)
0000         ?EPILOG_0000:

0000         ?NXT_0001:
              ; SOURCE LINE # 88 
0000 80                                IRET   

              ; FUNCTION ?TRAP_IRQHandler (END)

              ; FUNCTION ?TLI_IRQHandler (BEGIN)
0000         ?EPILOG_0001:

0000         ?NXT_0003:
              ; SOURCE LINE # 106 
0000 80                                IRET   

              ; FUNCTION ?TLI_IRQHandler (END)

              ; FUNCTION ?AWU_IRQHandler (BEGIN)
0000         ?EPILOG_0002:

0000         ?NXT_0005:
              ; SOURCE LINE # 124 
0000 80                                IRET   

              ; FUNCTION ?AWU_IRQHandler (END)

              ; FUNCTION ?CLK_IRQHandler (BEGIN)
0000         ?EPILOG_0003:

0000         ?NXT_0007:
              ; SOURCE LINE # 142 
0000 80                                IRET   

              ; FUNCTION ?CLK_IRQHandler (END)

              ; FUNCTION ?EXTI_PORTA_IRQHandler (BEGIN)
0000         ?EPILOG_0004:

0000         ?NXT_0009:
              ; SOURCE LINE # 160 
0000 80                                IRET   

              ; FUNCTION ?EXTI_PORTA_IRQHandler (END)

              ; FUNCTION ?EXTI_PORTB_IRQHandler (BEGIN)
0000         ?EPILOG_0005:

0000         ?NXT_0011:
              ; SOURCE LINE # 178 
0000 80                                IRET   

              ; FUNCTION ?EXTI_PORTB_IRQHandler (END)

              ; FUNCTION ?EXTI_PORTC_IRQHandler (BEGIN)
0000         ?EPILOG_0006:

0000         ?NXT_0013:
              ; SOURCE LINE # 196 
0000 80                                IRET   

              ; FUNCTION ?EXTI_PORTC_IRQHandler (END)

              ; FUNCTION ?EXTI_PORTD_IRQHandler (BEGIN)
0000         ?EPILOG_0007:

0000         ?NXT_0015:
              ; SOURCE LINE # 214 
0000 80                                IRET   

              ; FUNCTION ?EXTI_PORTD_IRQHandler (END)

              ; FUNCTION ?EXTI_PORTE_IRQHandler (BEGIN)
0000         ?EPILOG_0008:

0000         ?NXT_0017:
              ; SOURCE LINE # 232 
0000 80                                IRET   

              ; FUNCTION ?EXTI_PORTE_IRQHandler (END)

              ; FUNCTION ?SPI_IRQHandler (BEGIN)
0000         ?EPILOG_0009:

0000         ?NXT_0019:
              ; SOURCE LINE # 307 
0000 80                                IRET   

              ; FUNCTION ?SPI_IRQHandler (END)

              ; FUNCTION ?TIM1_UPD_OVF_TRG_BRK_IRQHandler (BEGIN)
0000         ?EPILOG_0010:

0000         ?NXT_0021:
              ; SOURCE LINE # 325 
0000 80                                IRET   

              ; FUNCTION ?TIM1_UPD_OVF_TRG_BRK_IRQHandler (END)

              ; FUNCTION ?TIM1_CAP_COM_IRQHandler (BEGIN)
0000         ?EPILOG_0011:

0000         ?NXT_0023:
              ; SOURCE LINE # 343 
0000 80                                IRET   

              ; FUNCTION ?TIM1_CAP_COM_IRQHandler (END)

              ; FUNCTION ?TIM2_UPD_OVF_BRK_IRQHandler (BEGIN)
0000         ?EPILOG_0012:

0000         ?NXT_0025:
              ; SOURCE LINE # 398 
0000 80                                IRET   

              ; FUNCTION ?TIM2_UPD_OVF_BRK_IRQHandler (END)

              ; FUNCTION ?TIM2_CAP_COM_IRQHandler (BEGIN)
0000         ?EPILOG_0013:

0000         ?NXT_0027:
              ; SOURCE LINE # 416 
0000 80                                IRET   

              ; FUNCTION ?TIM2_CAP_COM_IRQHandler (END)

              ; FUNCTION ?TIM3_UPD_OVF_BRK_IRQHandler (BEGIN)
              ; SOURCE LINE # 436 
0000 3B0003     F                      PUSH   ?BH
0003 3B0004     F                      PUSH   ?BL
0006 3B0005     F                      PUSH   ?CH
0009 3B0006     F                      PUSH   ?CL
              ; SOURCE LINE # 439 
000C BE00       F                      LDW    X,nbintr
000E 5C                                INCW   X
000F BF00       F                      LDW    nbintr,X
              ; SOURCE LINE # 442 
0011 AE00FA                            LDW    X,#000FAH
0014 B300       F                      CPW    X,nbintr
0016 2610                              JRNE   ?NXT_0030
              ; SOURCE LINE # 443 
0018 AE0001                            LDW    X,#00001H
001B 89                                PUSHW  X
001C AE500F                            LDW    X,#0500FH
001F CD0000     F                      CALL   ?GPIO_WriteReverse
0022 85                                POPW   X
              ; SOURCE LINE # 444 
0023 AE0000                            LDW    X,#00000H
0026 BF00       F                      LDW    nbintr,X
0028         ?NXT_0030:
              ; SOURCE LINE # 446 
0028 AE0001                            LDW    X,#00001H
002B CD0000     F                      CALL   ?TIM3_ClearITPendingBit
002E         ?EPILOG_0014:

002E         ?NXT_0031:
002E 320006     F                      POP    ?CL
0031 320005     F                      POP    ?CH
0034 320004     F                      POP    ?BL
0037 320003     F                      POP    ?BH
003A 80                                IRET   

              ; FUNCTION ?TIM3_UPD_OVF_BRK_IRQHandler (END)

              ; FUNCTION ?TIM3_CAP_COM_IRQHandler (BEGIN)
0000         ?EPILOG_0015:

0000         ?NXT_0033:
              ; SOURCE LINE # 459 
0000 80                                IRET   

              ; FUNCTION ?TIM3_CAP_COM_IRQHandler (END)

              ; FUNCTION ?I2C_IRQHandler (BEGIN)
0000         ?EPILOG_0016:

0000         ?NXT_0035:
              ; SOURCE LINE # 524 
0000 80                                IRET   

              ; FUNCTION ?I2C_IRQHandler (END)

              ; FUNCTION ?UART2_TX_IRQHandler (BEGIN)
0000         ?EPILOG_0017:

0000         ?NXT_0037:
              ; SOURCE LINE # 543 
0000 80                                IRET   

              ; FUNCTION ?UART2_TX_IRQHandler (END)

              ; FUNCTION ?UART2_RX_IRQHandler (BEGIN)
0000         ?EPILOG_0018:

0000         ?NXT_0039:
              ; SOURCE LINE # 561 
0000 80                                IRET   

              ; FUNCTION ?UART2_RX_IRQHandler (END)

              ; FUNCTION ?ADC1_IRQHandler (BEGIN)
0000         ?EPILOG_0019:

0000         ?NXT_0041:
              ; SOURCE LINE # 647 
0000 80                                IRET   

              ; FUNCTION ?ADC1_IRQHandler (END)

              ; FUNCTION ?TIM4_UPD_OVF_IRQHandler (BEGIN)
0000         ?EPILOG_0020:

0000         ?NXT_0043:
              ; SOURCE LINE # 681 
0000 80                                IRET   

              ; FUNCTION ?TIM4_UPD_OVF_IRQHandler (END)

              ; FUNCTION ?EEPROM_EEC_IRQHandler (BEGIN)
0000         ?EPILOG_0021:

0000         ?NXT_0045:
              ; SOURCE LINE # 700 
0000 80                                IRET   

              ; FUNCTION ?EEPROM_EEC_IRQHandler (END)

RCSTM8 COMPILER V2.26.09.317
NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====

FALSE. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TRUE . . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
RESET. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SET. . . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
DISABLE. . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ENABLE . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
ERROR. . . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
SUCCESS. . . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     5
  ODR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  DDR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
ADC1_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    48
  DB0RH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DB0RL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  DB1RH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  DB1RL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DB2RH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  DB2RL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DB3RH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  DB3RL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  DB4RH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  DB4RL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  DB5RH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  DB5RL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  DB6RH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  DB6RL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  DB7RH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  DB7RL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  DB8RH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  DB8RL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  DB9RH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  DB9RL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   ARRAY   000014H    12
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000020H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000021H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000022H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000023H     1
  DRH. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000024H     1
  DRL. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000025H     1
  TDRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000026H     1
  TDRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000027H     1
  HTRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000028H     1
  HTRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000029H     1
  LTRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00002AH     1
  LTRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00002BH     1
  AWSRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00002CH     1
  AWSRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00002DH     1
  AWCRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00002EH     1
  AWCRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00002FH     1
AWU_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     3
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  APR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  TBR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
BEEP_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
CLK_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    14
  ICKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ECKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  CMSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SWR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SWCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CKDIVR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PCKENR1. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CSSR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCOR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PCKENR2. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CANCCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  HSITRIMR . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  SWIMCCR. . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
TIM1_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    32
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ETR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCMR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  PSCRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  PSCRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  RCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000017H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000018H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000019H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001AH     1
  CCR4H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001BH     1
  CCR4L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001CH     1
  BKR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001DH     1
  DTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001EH     1
  OISR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00001FH     1
TIM2_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    21
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
TIM3_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    17
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
TIM4_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     7
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
TIM5_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    23
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CCMR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CCMR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CCMR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  CCER1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCER2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CNTRH. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  CNTRL. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
  ARRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000FH     1
  ARRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000010H     1
  CCR1H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000011H     1
  CCR1L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000012H     1
  CCR2H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000013H     1
  CCR2L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000014H     1
  CCR3H. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000015H     1
  CCR3L. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000016H     1
TIM6_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     9
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  SMCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  IER. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  EGR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CNTR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  ARR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
I2C_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    15
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  FREQR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OARL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  OARH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  SR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  SR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  SR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  ITR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  CCRL . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  CCRH . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  TRISER . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
ITC_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  ISPR1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  ISPR2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ISPR3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  ISPR4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  ISPR5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  ISPR6. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  ISPR7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  ISPR8. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
EXTI_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     2
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
FLASH_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    11
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NCR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  FPR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NFPR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  IAPSR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  PUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  RESERVED3. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  DUKR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
OPT_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    15
  OPT0 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  OPT1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  NOPT1. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  OPT2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  NOPT2. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  OPT3 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  NOPT3. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  OPT4 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  NOPT4. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  OPT5 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  NOPT5. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  RESERVED1. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
  RESERVED2. . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000CH     1
  OPT7 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000DH     1
  NOPT7. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000EH     1
IWDG_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     3
  KR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  PR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  RLR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
WWDG_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     2
  CR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  WR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
RST_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
SPI_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     8
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  ICR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CRCPR. . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  RXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  TXCRCR . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
SWIM_struct. . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     2
  CSR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
UART1_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    11
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
UART2_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    12
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  CR5. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
  GTR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000AH     1
  PSCR . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  00000BH     1
UART3_struct . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------    10
  SR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
  DR . . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000001H     1
  BRR1 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000002H     1
  BRR2 . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000003H     1
  CR1. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000004H     1
  CR2. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000005H     1
  CR3. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000006H     1
  CR4. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000007H     1
  RESERVED . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000008H     1
  CR6. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000009H     1
CFG_struct . . . . . . . . . . . . . . * TAG *  ----- STRUCT  -------     1
  GCR. . . . . . . . . . . . . . . . .  MEMBER  -----   U_CHAR  000000H     1
BEEP_FREQUENCY_1KHZ. . . . . . . . . . E_CONST  ----- INT      -------  2
BEEP_FREQUENCY_2KHZ. . . . . . . . . . E_CONST  ----- INT      -------  2
BEEP_FREQUENCY_4KHZ. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWITCHMODE_MANUAL. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWITCHMODE_AUTO. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CURRENTCLOCKSTATE_DISABLE. . . . . E_CONST  ----- INT      -------  2
CLK_CURRENTCLOCKSTATE_ENABLE . . . . . E_CONST  ----- INT      -------  2
CLK_CSSCONFIG_ENABLEWITHIT . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSCONFIG_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CSSCONFIG_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SOURCE_HSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SOURCE_LSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SOURCE_HSE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_0 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_1 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_2 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_3 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_4 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_5 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_6 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_HSITRIMVALUE_7 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_HSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_LSI . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_HSE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPU . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV2 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV4 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV8 . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV16. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV32. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_CPUDIV64. . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_HSIRC . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_MASTER. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_OUTPUT_OTHERS. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_I2C . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_SPI . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART1 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART2 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_UART3 . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER6. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER5. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER3. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_TIMER1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_AWU . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_ADC . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PERIPHERAL_CAN . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_LSIRDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_HSIRDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_HSERDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_SWIF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_SWBSY . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CSSD. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_AUX . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CCOBSY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_FLAG_CCORDY. . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_IT_CSSD. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_IT_SWIF. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_HSIDIV8. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV1. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV2. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV4. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV8. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV16 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV32 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV64 . . . . . . . . E_CONST  ----- INT      -------  2
CLK_PRESCALER_CPUDIV128. . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWIMDIVIDER_2. . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_SWIMDIVIDER_OTHER. . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CANDIVIDER_1 . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CANDIVIDER_2 . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CANDIVIDER_3 . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CANDIVIDER_4 . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CANDIVIDER_5 . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CANDIVIDER_6 . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CANDIVIDER_7 . . . . . . . . . . . E_CONST  ----- INT      -------  2
CLK_CANDIVIDER_8 . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_FL_NO_IT. . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_PU_NO_IT. . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_FL_IT . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_IN_PU_IT . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_LOW_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_LOW_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_LOW_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_LOW_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_HIZ_FAST. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_HIGH_FAST . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_OD_HIZ_SLOW. . . . . . . E_CONST  ----- INT      -------  2
GPIO_MODE_OUT_PP_HIGH_SLOW . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_0 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_1 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_2 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_3 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_4 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_5 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_6 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_7 . . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_LNIB. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_HNIB. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
GPIO_PIN_ALL . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_FORCEDACTION_ACTIVE . . . . . . . E_CONST  ----- INT      -------  2
TIM3_FORCEDACTION_INACTIVE . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_1 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_2 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_4 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_8 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_16. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_32. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_64. . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_128 . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_256 . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_512 . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_1024. . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_2048. . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_4096. . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_8192. . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_16384 . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PRESCALER_32768 . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OCMODE_TIMING . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OCMODE_ACTIVE . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OCMODE_INACTIVE . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OCMODE_TOGGLE . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OCMODE_PWM1 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OCMODE_PWM2 . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OPMODE_SINGLE . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OPMODE_REPETITIVE . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_CHANNEL_1 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_CHANNEL_2 . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OCPOLARITY_HIGH . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OCPOLARITY_LOW. . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OUTPUTSTATE_DISABLE . . . . . . . E_CONST  ----- INT      -------  2
TIM3_OUTPUTSTATE_ENABLE. . . . . . . . E_CONST  ----- INT      -------  2
TIM3_ICPOLARITY_RISING . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_ICPOLARITY_FALLING. . . . . . . . E_CONST  ----- INT      -------  2
TIM3_ICSELECTION_DIRECTTI. . . . . . . E_CONST  ----- INT      -------  2
TIM3_ICSELECTION_INDIRECTTI. . . . . . E_CONST  ----- INT      -------  2
TIM3_ICSELECTION_TRGI. . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_ICPSC_DIV1. . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_ICPSC_DIV2. . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_ICPSC_DIV4. . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_ICPSC_DIV8. . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_IT_UPDATE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_IT_CC1. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_IT_CC2. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_PSCRELOADMODE_UPDATE. . . . . . . E_CONST  ----- INT      -------  2
TIM3_PSCRELOADMODE_IMMEDIATE . . . . . E_CONST  ----- INT      -------  2
TIM3_EVENTSOURCE_UPDATE. . . . . . . . E_CONST  ----- INT      -------  2
TIM3_EVENTSOURCE_CC1 . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_EVENTSOURCE_CC2 . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_UPDATESOURCE_GLOBAL . . . . . . . E_CONST  ----- INT      -------  2
TIM3_UPDATESOURCE_REGULAR. . . . . . . E_CONST  ----- INT      -------  2
TIM3_FLAG_UPDATE . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_FLAG_CC1. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_FLAG_CC2. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_FLAG_CC1OF. . . . . . . . . . . . E_CONST  ----- INT      -------  2
TIM3_FLAG_CC2OF. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IRDAMODE_NORMAL. . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IRDAMODE_LOWPOWER. . . . . . . . E_CONST  ----- INT      -------  2
UART2_WAKEUP_IDLELINE. . . . . . . . . E_CONST  ----- INT      -------  2
UART2_WAKEUP_ADDRESSMARK . . . . . . . E_CONST  ----- INT      -------  2
UART2_LINBREAKDETECTIONLENGTH_10BITS . E_CONST  ----- INT      -------  2
UART2_LINBREAKDETECTIONLENGTH_11BITS . E_CONST  ----- INT      -------  2
UART2_STOPBITS_1 . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_STOPBITS_0_5 . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_STOPBITS_2 . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_STOPBITS_1_5 . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_PARITY_NO. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_PARITY_EVEN. . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_PARITY_ODD . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_LIN_MODE_MASTER. . . . . . . . . E_CONST  ----- INT      -------  2
UART2_LIN_MODE_SLAVE . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_LIN_AUTOSYNC_DISABLE . . . . . . E_CONST  ----- INT      -------  2
UART2_LIN_AUTOSYNC_ENABLE. . . . . . . E_CONST  ----- INT      -------  2
UART2_LIN_DIVUP_LBRR1. . . . . . . . . E_CONST  ----- INT      -------  2
UART2_LIN_DIVUP_NEXTRXNE . . . . . . . E_CONST  ----- INT      -------  2
UART2_SYNCMODE_CLOCK_DISABLE . . . . . E_CONST  ----- INT      -------  2
UART2_SYNCMODE_CLOCK_ENABLE. . . . . . E_CONST  ----- INT      -------  2
UART2_SYNCMODE_CPOL_LOW. . . . . . . . E_CONST  ----- INT      -------  2
UART2_SYNCMODE_CPOL_HIGH . . . . . . . E_CONST  ----- INT      -------  2
UART2_SYNCMODE_CPHA_MIDDLE . . . . . . E_CONST  ----- INT      -------  2
UART2_SYNCMODE_CPHA_BEGINING . . . . . E_CONST  ----- INT      -------  2
UART2_SYNCMODE_LASTBIT_DISABLE . . . . E_CONST  ----- INT      -------  2
UART2_SYNCMODE_LASTBIT_ENABLE. . . . . E_CONST  ----- INT      -------  2
UART2_WORDLENGTH_8D. . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_WORDLENGTH_9D. . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_MODE_RX_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_MODE_TX_ENABLE . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_MODE_TX_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
UART2_MODE_RX_DISABLE. . . . . . . . . E_CONST  ----- INT      -------  2
UART2_MODE_TXRX_ENABLE . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_TXE . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_TC. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_RXNE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_IDLE. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_OR_LHE. . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_NF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_FE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_PE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_SBK . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_LBDF. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_LHDF. . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_FLAG_LSF . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IT_TXE . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IT_TC. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IT_RXNE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IT_IDLE. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IT_OR. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IT_PE. . . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IT_LBDF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IT_LHDF. . . . . . . . . . . . . E_CONST  ----- INT      -------  2
UART2_IT_RXNE_OR . . . . . . . . . . . E_CONST  ----- INT      -------  2
TxBuffer . . . . . . . . . . . . . . .  PUBLIC  page0   ARRAY   000000H 1      
RxBuffer . . . . . . . . . . . . . . .  PUBLIC  page0   ARRAY   000000H 32     
NbrOfDataToTransfer. . . . . . . . . .  PUBLIC  page0   U_CHAR  000000H 1      
NbrOfDataToRead. . . . . . . . . . . .  PUBLIC  page0   U_CHAR  000000H 1      
TxCounter. . . . . . . . . . . . . . .  PUBLIC  page0   U_CHAR  000001H 1      
RxCounter. . . . . . . . . . . . . . .  PUBLIC  page0   U_INT   000001H 2      
nbintr . . . . . . . . . . . . . . . .  PUBLIC  page0   U_INT   000001H 2      
TRAP_IRQHandler. . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
TLI_IRQHandler . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
AWU_IRQHandler . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
CLK_IRQHandler . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
EXTI_PORTA_IRQHandler. . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
EXTI_PORTB_IRQHandler. . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
EXTI_PORTC_IRQHandler. . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
EXTI_PORTD_IRQHandler. . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
EXTI_PORTE_IRQHandler. . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
SPI_IRQHandler . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
TIM1_UPD_OVF_TRG_BRK_IRQHandler. . . .  PUBLIC  CODE    PROC    ------- -----
TIM1_CAP_COM_IRQHandler. . . . . . . .  PUBLIC  CODE    PROC    ------- -----
TIM2_UPD_OVF_BRK_IRQHandler. . . . . .  PUBLIC  CODE    PROC    ------- -----
TIM2_CAP_COM_IRQHandler. . . . . . . .  PUBLIC  CODE    PROC    ------- -----
TIM3_UPD_OVF_BRK_IRQHandler. . . . . .  PUBLIC  CODE    PROC    ------- -----
TIM3_CAP_COM_IRQHandler. . . . . . . .  PUBLIC  CODE    PROC    ------- -----
I2C_IRQHandler . . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
UART2_TX_IRQHandler. . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
UART2_RX_IRQHandler. . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
ADC1_IRQHandler. . . . . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
TIM4_UPD_OVF_IRQHandler. . . . . . . .  PUBLIC  CODE    PROC    ------- -----
EEPROM_EEC_IRQHandler. . . . . . . . .  PUBLIC  CODE    PROC    ------- -----
GPIO_WriteReverse. . . . . . . . . . .  EXTERN  CODE    PROC    ------- -----
TIM3_ClearITPendingBit . . . . . . . .  EXTERN  CODE    PROC    ------- -----
?BH. . . . . . . . . . . . . . . . . .  EXTERN  page0   U_CHAR  ------- -----
?BL. . . . . . . . . . . . . . . . . .  EXTERN  page0   U_CHAR  ------- -----
?CH. . . . . . . . . . . . . . . . . .  EXTERN  page0   U_CHAR  ------- -----
?CL. . . . . . . . . . . . . . . . . .  EXTERN  page0   U_CHAR  ------- -----
RCSTM8 COMPILER V2.26.09.317


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     80    ----
   CONSTANT SIZE    =     89    ----
   DATA SIZE        =   ----    ----
   PAGE0 SIZE       =     40    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

RCSTM8 COMPILATION COMPLETE.  0 WARNING,  0 ERROR
